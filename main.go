// Package main ...
package main

import (
	_ "embed"
	"flag"
	"io"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"runtime"
	"strconv"

	lint "github.com/ysmood/golangci-lint/pkg/lint" //nolint: depguard
)

//go:embed .golangci.yml
var defaultConf string

var (
	ver   = flag.String("v", lint.DefaultVer, "version of the golangci-lint to use")
	quiet = flag.Bool("q", false, "disable the log not generated by golangci-lint")
	tidy  = flag.Bool("t", true, "whether to run \"go mod tidy\" after lint")
	conf  = flag.Bool("c", true, "whether try to create a default .golangci.yml file if not exists")
)

func main() {
	args := getLintArgs()

	flag.Parse()

	ltr := lint.New()
	ltr.Version = *ver

	if *quiet {
		ltr.Logger.SetOutput(io.Discard)
	}

	initDefaultConf()

	err := ltr.Lint(args...)

	if needTidy() && *tidy {
		_ = exec.Command("go", "mod", "tidy").Run()
	}

	if err != nil {
		log.Fatalln(err)
	}
}

func getLintArgs() []string {
	args := []string{}
	lintArgs := []string{}
	sep := false

	for _, arg := range os.Args {
		if arg == "--" {
			sep = true

			continue
		}

		if sep {
			lintArgs = append(lintArgs, arg)
		} else {
			args = append(args, arg)
		}
	}

	os.Args = args

	if len(lintArgs) == 0 {
		lintArgs = []string{"run", "--fix"}
	}

	return lintArgs
}

func initDefaultConf() {
	if !*conf {
		return
	}

	b, err := exec.Command("go", "env", "GOMOD").CombinedOutput()
	if err != nil {
		return
	}

	path := filepath.Join(filepath.Dir(string(b)), ".golangci.yml")

	if _, err := os.Stat(path); err == nil {
		return
	}

	const perm = 0o600

	_ = os.WriteFile(path, []byte(defaultConf), perm)
}

func needTidy() bool {
	reg := regexp.MustCompile(`go(\d+).(\d+)`)
	ms := reg.FindStringSubmatch(runtime.Version())
	major, _ := strconv.ParseInt(ms[1], 10, 32)
	minor, _ := strconv.ParseInt(ms[2], 10, 32)

	return major <= 1 && minor < 16
}
