// Package main ...
package main

import (
	"flag"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"runtime"
	"strconv"

	lint "github.com/ysmood/golangci-lint/pkg/lint"
)

var ver = flag.String("v", lint.DefaultVer, "version of the golangci-lint to use")
var quiet = flag.Bool("q", false, "disable the log not generated by golangci-lint")
var tidy = flag.Bool("t", true, "whether to run \"go mod tidy\" after lint")
var conf = flag.Bool("c", true, "whether try to create a default .golangci.yml file if not exists")

func main() {
	args := getLintArgs()

	flag.Parse()

	ltr := lint.New()
	ltr.Version = *ver

	if *quiet {
		ltr.Logger.SetOutput(ioutil.Discard)
	}

	initDefaultConf()

	err := ltr.Lint(args...)

	if needTidy() && *tidy {
		_ = exec.Command("go", "mod", "tidy").Run()
	}

	if err != nil {
		log.Fatalln(err)
	}
}

func getLintArgs() []string {
	args := []string{}
	lintArgs := []string{}
	sep := false
	for _, v := range os.Args {
		if v == "--" {
			sep = true
			continue
		}
		if sep {
			lintArgs = append(lintArgs, v)
		} else {
			args = append(args, v)
		}
	}

	os.Args = args

	if len(lintArgs) == 0 {
		lintArgs = []string{"run", "--fix"}
	}

	return lintArgs
}

func initDefaultConf() {
	if !*conf {
		return
	}

	b, err := exec.Command("go", "env", "GOMOD").CombinedOutput()
	if err != nil {
		return
	}

	p := filepath.Join(filepath.Dir(string(b)), ".golangci.yml")

	if _, err := os.Stat(p); err == nil {
		return
	}

	_ = ioutil.WriteFile(p, []byte(defaultConf), 0664)
}

func needTidy() bool {
	reg := regexp.MustCompile(`go(\d+).(\d+)`)
	ms := reg.FindStringSubmatch(runtime.Version())
	major, _ := strconv.ParseInt(ms[1], 10, 32)
	minor, _ := strconv.ParseInt(ms[2], 10, 32)

	return major <= 1 && minor < 16
}
